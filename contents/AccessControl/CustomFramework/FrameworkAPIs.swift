
import Foundation

/// Everything that is declared as `public` will be accessible
/// from other modules/targets.
///
/// Everything that will be declared as `internal` (default)
/// or `private` or `fileprivate` will not be accessible from
/// other modules/targets. Will remain hidden for outside world.
///
///

/// ⚡️: Same symbols are present in the the application target.
private let randomNumber = 4
public  let quote        = "Można pić bez obawień"

public class FrameworkClass {
    
    /// By default has `internal` access modifier.
    let name = "FrameworkClass"

    /// If you want to create instance of this type from
    /// another module you must write your own implementation
    /// of init that is public. Generated by the compiler is internal.
    public init () {}
}

public struct FrameworkStructure {
    public init() {}
}

extension FrameworkStructure { // domyślnie __internal__
    var quoteForADay: String { "Kto rano wstaje temu Pan Bóg daje." }

    public var quoteForLife: String { "Zakręcaj weki!" }
}

public extension FrameworkStructure { // domyślnie __internal__
    var quoteForTomorrow: String { "Jutro będzie futro." }
}

public typealias FStruct = FrameworkStructure // 💡 zmień public na internal

// Wszystkie CASEy mają ten sam modyfikator dostępu który występuje przy definicji. 
// Mogą natomiast mieć bardziej "swobodny".
public enum FrameworkEnum {
    case first
    case next(FStruct)
}

public func demoForFileprivateAccessFromPublic() {
    /// 💥 Cannot find 'FrameworkFilePrivateClass' in scope
//    let instance = FrameworkFilePrivateClass()
}

func demoForPrivateAccessFromPublic() {
    /// 💥  Cannot find 'FrameworkFilePrivateClass' in scope
//    let instance = FrameworkFilePrivateClass()
}
