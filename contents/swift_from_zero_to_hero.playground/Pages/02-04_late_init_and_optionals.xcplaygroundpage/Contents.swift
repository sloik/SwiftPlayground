//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
//:> ## Late Initialization and Optionals
/*:
* [ğŸ‡µğŸ‡± Swift od zera do bohatera! Typealias / Late Initialisation i Swift Optionals? Maybe ;)](https://www.youtube.com/watch?v=g47gSqtObDY&list=PLk_5PV9LrXp-5ImtHWeIsabWhBELxYNsu&index=5)
*/
import Foundation
//: ## Late Initialization
//: MoÅ¼na zadeklarowaÄ‡ zmiennÄ… aby byÅ‚a jakiegoÅ› typu natomiast przypisaÄ‡ jej wartoÅ›Ä‡ pÃ³Å¼niej.

var cytat: String

//: error: variable 'cytat' used before being initialized
//print(cytat) // ğŸ’¥

cytat = "Niebo w ziemi. -- WiesÅ‚aw Wszywka"

//: Podobnie deklarujÄ…c staÅ‚Ä… przy uÅ¼yciu sÅ‚owa kluczowego **_let_** moÅ¼emy przypisaÄ‡ wartoÅ›Ä‡ pÃ³zniej. Natomiast moÅ¼na to zrobiÄ‡ tylko raz!

let cytat2 : String
cytat2 = "I nie damy sobie wmÃ³wiÄ‡, Å¼e biaÅ‚e jest biaÅ‚e a czarne jest czarne."
//: execution failed: immutable value 'cytat2' may only be initialized once ... note: change 'let' to 'var' to make it mutable
//cytat2 = "Sorry bÄ™dziesz to jadÅ‚?" // ğŸ’¥

//: ## Optionals
//: W pierwszym cytacie mamy maÅ‚y wybuch ğŸ’¥ z powodu chÄ™ci uÅ¼ycia zmiennej, ktÃ³ra nie jest jeszcze zainicjowane lub ma vartoÅ›Ä‡ **`nil`**. Czasami natomiast potrzebujemy pracowaÄ‡ ze zmiennymi ktÃ³re mogÄ… jeszcze nie posiadaÄ‡ wartoÅ›ci. Swift posiada specjalnÄ… konstrukcje, ktÃ³ra siÄ™ nazywa **Optionals**. 
//: Optionala deklarujemy dodajÄ…c `?` za nazwÄ… typ np.
var bycMozeCytat: String?
type(of: bycMozeCytat)

var bycMozeCalkowita:Int?
type(of: bycMozeCalkowita)

//: Teraz moÅ¼emy "uÅ¼ywaÄ‡" bezpiecznie takich zmiennych bez ğŸ’¥
run("optional default value") {
    print(bycMozeCytat ?? "nie bylo wartosci")
    print(bycMozeCalkowita ?? "nie bylo wartosci")
}


//: MoÅ¼emy sprawdziÄ‡ czy string jest pusty
bycMozeCytat = ""
bycMozeCytat?.isEmpty
bycMozeCytat == nil

//: O `optionalach` moÅ¼na mysleÄ‡ jak o pudeÅ‚kach zawierajÄ…cych (lub nie) jakÄ…Å› wartoÅ›. Same w sobie nie sÄ… wartoÅ›ciÄ… (chociaÅ¼ sÄ… bardzo uÅ¼yteczne ğŸ˜‰) tylko "kontenerem" przechowujÄ…cym tÄ… wartoÅ›Ä‡. Doskonale to widaÄ‡ gdy "wydrukujemy" zmiennÄ… ktÃ³ra jest optionalem.
run("optional with value") {
    bycMozeCytat = "Sorry bÄ™dziesz to jeÅ›Ä‡?"
    print(bycMozeCytat ?? "zabraklo wartosci")
}

//: SÄ… takie momenty w Å¼yciu, Å¼e czegoÅ› jesteÅ›my pewni na 100%. Podobnie czasami wiemy, Å¼e jakaÅ› opcjonalna wartoÅ› jest przechowywana w opcjonalnej zmiennej. MoÅ¼emy jÄ… wtedy "odwinÄ…Ä‡" (force unwrap) i dostaÄ‡ jÄ… bezpoÅ›rednio przy uÅ¼yciu `!` za nazwÄ… zmiennej.
print(bycMozeCytat!) // Dostajemy bezpoÅ›rednio przechowywanÄ… wartoÅ›Ä‡.
type(of: bycMozeCytat!)

//: WyciÄ…gnÄ…Ä‡ zawartoÅ›Ä‡ moÅ¼emy teÅ¼ w trakcie przypisywania do innej zmiennej/staÅ‚ej.
var zPewnosciaCytat = bycMozeCytat!
type(of: zPewnosciaCytat)

//: GdybyÅ›my jednak chcieli dostaÄ‡ siÄ™ do zawartoÅ›ci optionala ktÃ³ry jest pusty (nil) to w tym momencie dostaniemy wyjÄ…tek w runtime.
bycMozeCytat = nil
//: fatal error: unexpectedly found nil while unwrapping an Optional value
//zPewnosciaCytat = bycMozeCytat! // ğŸ’¥


print("ğŸ¤“")
//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
